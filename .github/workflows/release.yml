name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # D√©clench√© par les tags de version (ex: v1.0.0)
  workflow_dispatch:  # Permet de d√©clencher manuellement
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # R√©cup√®re tout l'historique pour le changelog

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Extract version from tag
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

    - name: Install git-cliff
      run: |
        # Installation de git-cliff via GitHub releases avec version et architecture fixes
        CLIFF_VERSION="2.6.1"
        ARCH="x86_64"

        echo "Downloading git-cliff v${CLIFF_VERSION} for ${ARCH}..."
        curl -L -o git-cliff.tar.gz \
          "https://github.com/orhun/git-cliff/releases/download/v${CLIFF_VERSION}/git-cliff-${CLIFF_VERSION}-${ARCH}-unknown-linux-gnu.tar.gz"

        # V√©rifier que le t√©l√©chargement a r√©ussi
        if [ ! -f git-cliff.tar.gz ] || [ ! -s git-cliff.tar.gz ]; then
          echo "‚ùå Download failed, trying alternative method..."
          # Fallback: installation via cargo
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source ~/.cargo/env
          cargo install git-cliff --version ${CLIFF_VERSION}
        else
          echo "‚úÖ Download successful, extracting..."
          tar -xzf git-cliff.tar.gz
          chmod +x git-cliff/git-cliff
          sudo mv git-cliff/git-cliff /usr/local/bin/git-cliff
        fi

        # V√©rifier l'installation
        git-cliff --version

    - name: Generate changelog
      id: changelog
      run: |
        # G√©n√©ration du changelog pour cette version
        git-cliff --tag ${{ steps.version.outputs.version }} --output CHANGELOG_RELEASE.md --strip header

        # Lecture du contenu pour l'utiliser dans la release
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG_RELEASE.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Update version in files
      run: |
        # Mise √† jour du num√©ro de version dans les fichiers Python
        VERSION_NUMBER="${{ steps.version.outputs.version_number }}"

        # Cr√©er ou mettre √† jour __version__.py
        echo "__version__ = \"$VERSION_NUMBER\"" > src/__version__.py

        # Mettre √† jour pyproject.toml si il existe
        if [ -f pyproject.toml ]; then
          sed -i "s/version = \".*\"/version = \"$VERSION_NUMBER\"/" pyproject.toml
        fi

    - name: Create distribution packages
      run: |
        python -m pip install build
        python -m build

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## üöÄ Release ${{ steps.version.outputs.version }}

          ### Changes
          ${{ steps.changelog.outputs.changelog }}

          ### Installation
          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd ${{ github.event.repository.name }}
          git checkout ${{ steps.version.outputs.version }}
          pip install -r requirements.txt
          ```

          ### Verification
          Run the tests to verify the installation:
          ```bash
          python -m pytest tests/
          ```
        draft: false
        prerelease: false

    - name: Upload Distribution Packages
      if: always() && steps.create_release.outputs.upload_url
      run: |
        # Cr√©er un zip des packages de distribution
        cd dist
        zip -r ../distribution-packages.zip .
        cd ..

        # Upload via curl car upload-release-asset est d√©pr√©ci√©
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/zip" \
          --data-binary @distribution-packages.zip \
          "${{ steps.create_release.outputs.upload_url }}?name=distribution-packages.zip&label=Distribution Packages"
