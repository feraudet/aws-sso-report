repos:
  # Basic pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
      - id: check-merge-conflict
      - id: debug-statements
      - id: requirements-txt-fixer

  # Black code formatter
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3

  # isort import sorter
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]

  # flake8 linter (basic config)
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8

  # bandit security linter
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-c, pyproject.toml]
        additional_dependencies: ["bandit[toml]"]

  # Unit tests
  - repo: local
    hooks:
      - id: pytest
        name: pytest
        entry: python -m pytest tests/test_data_models.py tests/test_utils.py tests/test_aws_clients.py tests/test_report_generators.py tests/test_data_collector_simple.py -v
        language: system
        pass_filenames: false
        always_run: true

  # Simple commit message validation (avoiding Node.js ICU issues)
  - repo: local
    hooks:
      - id: commit-msg-validation
        name: Validate commit message format
        entry: bash
        args:
          - -c
          - |
            msg=$(cat "$0")
            header=$(echo "$msg" | head -n1)

            # Check conventional commit format
            if [[ ! "$header" =~ ^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\(.+\))?: ]]; then
              echo "❌ Commit message must start with type: feat, fix, docs, style, refactor, perf, test, chore, ci, build, or revert"
              echo "   Format: type(scope): description"
              echo "   Example: feat(auth): add user login functionality"
              exit 1
            fi

            # Extract subject (description part)
            subject=$(echo "$header" | sed "s/^[^:]*: //")

            # Check subject length
            if [[ ${#subject} -lt 10 ]]; then
              echo "❌ Commit message subject must be at least 10 characters long"
              echo "   Current: \"$subject\" (${#subject} characters)"
              exit 1
            fi
            if [[ ${#subject} -gt 72 ]]; then
              echo "❌ Commit message subject must be at most 72 characters long"
              echo "   Current: \"$subject\" (${#subject} characters)"
              exit 1
            fi

            # Check header total length (type + scope + subject)
            if [[ ${#header} -gt 100 ]]; then
              echo "❌ Commit message header must be at most 100 characters long"
              echo "   Current: \"$header\" (${#header} characters)"
              exit 1
            fi

            # Check subject case (should be lowercase)
            if [[ "$subject" =~ ^[A-Z] ]]; then
              echo "❌ Commit message subject should start with lowercase"
              echo "   Current: \"$subject\""
              echo "   Suggestion: \"$(echo "$subject" | sed 's/^./\L&/')\""
              exit 1
            fi

            # Check subject doesn't end with period
            if [[ "$subject" =~ \.$ ]]; then
              echo "❌ Commit message subject should not end with a period"
              echo "   Current: \"$subject\""
              exit 1
            fi

            echo "✅ Commit message format is valid"
        language: system
        stages: [commit-msg]
        pass_filenames: true
